//递归函数
#include<stdio.h>
//递归：自己调用自己
//调用自己跟调用其他函数并没有什么本质区别，都是建立新栈帧，传递参数并修改当前代码行。在函数体执行完毕后删除栈帧，处理返回值并修改当前代码行 
//用递归法计算阶乘
int jiecheng(int n){
	if(n==0)//注意写递归的中止条件 
		return 1;
	return n*jiecheng(n-1);
	
} 
int main() {
	//int n=10;
	int n=1000000000;//测试是否溢出，当时没有输出，用gdb调试，原因是栈溢出 
	printf("%d",jiecheng(n));
	
	return 0;
}
/* 
1、在可执行文件中，包含正文段（存储指令）、数据段（存储已经初始化的全局变量）和BBS段（存储为未赋值的全局变量所需的空间）
2、调用栈不存储在可执行文件中，而是在运行时创建（调用栈）。调用栈所在的段是堆栈段。和其他段一样也有自己的大小，不能被越界访问，否则会出现段错误。  
   在Linux中，栈的大小是由系统命令ulimit指定的，例如ulimit -a显示当前栈的大小，ulimit -s 32768将把栈的大小指定为32MB；
   在Windows中，栈的大小存储在可执行程序中，用gcc -W1,stcak=<bytr count>指定。
3、把较大数组放在main函数外的原因：局部变量是放在堆栈端的，即栈溢出可能是递归调用太多，也可能是局部变量太大，超过了允许范围，就会产生栈溢出
 
*/ 
